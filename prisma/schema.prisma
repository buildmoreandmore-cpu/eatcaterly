// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String    @id @default(cuid())
  phoneNumber String    @unique
  name        String?
  email       String?
  isActive    Boolean   @default(true)
  preferences Json? // Store customer preferences as JSON
  tags        String[] // Customer tags like "VIP", "Regular", "New"
  category    String? // Customer category like "Frequent", "Occasional", "One-time"
  notes       String? // Admin notes about customer
  lastOrderAt DateTime? // Track last order date
  totalOrders Int       @default(0) // Track total order count
  totalSpent  Int       @default(0) // Track total amount spent (in cents)
  businessId  String // Which business owns this customer
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  businessCustomer    BusinessCustomer @relation(fields: [businessId], references: [id])
  orders              Order[]
  smsLogs             SmsLog[]
  customerListMembers CustomerListMember[]

  @@map("customers")
}

model BusinessCustomer {
  id                  String  @id @default(cuid())
  businessName        String
  contactName         String
  contactEmail        String  @unique
  zipCode             String
  assignedPhoneNumber String? @unique // Nullable for promo users awaiting manual assignment
  areaCode            String
  city                String?
  state               String?
  isActive            Boolean @default(true)
  onboardingCompleted Boolean @default(false)
  subscriptionStatus  String  @default("trial") // trial, active, suspended, cancelled
  monthlyLimit        Int     @default(1000) // SMS limit per month
  currentUsage        Int     @default(0) // Current month SMS count

  // Stripe Connect fields (for accepting payments from end customers)
  stripeConnectAccountId   String? @unique // Stripe Express account ID
  stripeAccountStatus      String? @default("pending") // pending, active, restricted, disabled
  stripeOnboardingComplete Boolean @default(false) // Has completed Stripe onboarding
  stripeDashboardEnabled   Boolean @default(false) // Can access Stripe Express dashboard
  stripePayoutsEnabled     Boolean @default(false) // Can receive payouts
  stripeChargesEnabled     Boolean @default(false) // Can accept charges
  stripeDetailsSubmitted   Boolean @default(false) // Has submitted required details

  // Stripe subscription fields (for their subscription to our service)
  stripeCustomerId     String? @unique // Stripe customer ID for their subscription
  stripeSubscriptionId String? @unique // Stripe subscription ID

  // EZ Texting phone number fields
  ezTextingNumberId   String?   @unique // EZ Texting number ID
  numberProvisionedAt DateTime? // When the phone number was provisioned

  // Promo code fields
  promoCodeId         String? // Which promo code was used
  promoCode           PromoCode? @relation(fields: [promoCodeId], references: [id])
  promoCodeUsed       String? // Store the actual code string for reference
  phoneNumberFeeWaived Boolean @default(false) // Did they get free phone number
  subscriptionTier     String? // Which plan they selected (starter, pro)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customers     Customer[]
  menus         Menu[]
  customerLists CustomerList[]
  orders        Order[]

  @@map("business_customers")
}

model PhoneNumberInventory {
  id              String    @id @default(cuid())
  phoneNumber     String    @unique // E.164 format (e.g., +14045551234)
  ezTextingNumberId String? @unique // EZ Texting number ID for API operations
  areaCode        String // Area code (e.g., "404", "770")
  status          PhoneNumberStatus @default(AVAILABLE) // Current status

  // Assignment tracking
  currentBusinessId String? // Currently assigned to which business
  previousBusinessId String? // Previous owner for tracking
  assignedAt      DateTime? // When it was assigned
  releasedAt      DateTime? // When it was released (for cooldown tracking)

  // Purchase tracking
  purchasedAt     DateTime  @default(now()) // When we acquired this number
  monthlyPrice    Float?    // Monthly cost from EZTexting
  source          String    @default("eztexting") // Where we got it from

  // Metadata
  notes           String? // Admin notes
  cooldownUntil   DateTime? // Can't reassign until this date (30 day cooldown)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([status])
  @@index([areaCode])
  @@index([currentBusinessId])
  @@map("phone_number_inventory")
}

enum PhoneNumberStatus {
  AVAILABLE // Ready to assign
  ASSIGNED  // Currently assigned to a business
  RESERVED  // Temporarily reserved during signup
  COOLDOWN  // Released but in cooldown period
  RETIRED   // Permanently removed from pool
}

model PromoCode {
  id             String   @id @default(cuid())
  code           String   @unique // e.g., "LAUNCH100", "SAVE50"
  discountType   DiscountType @default(PERCENTAGE)
  discountValue  Int // For PERCENTAGE: 100 = 100% off, For FIXED_AMOUNT: amount in cents

  // Promo features
  freePhoneNumber Boolean @default(false) // Waives $30 phone number fee
  freeSubscription Boolean @default(false) // Waives monthly subscription fee

  // Usage tracking
  isActive    Boolean  @default(true)
  maxUses     Int? // null = unlimited
  currentUses Int      @default(0)

  // Metadata
  description String? // Internal notes about this promo
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  businessCustomers BusinessCustomer[]

  @@map("promo_codes")
}

enum DiscountType {
  PERCENTAGE // e.g., 100% off, 50% off
  FIXED_AMOUNT // e.g., $20 off
}

model CustomerList {
  id                 String   @id @default(cuid())
  name               String // e.g., "VIP Customers", "Lunch Regulars", "Weekend Orders"
  description        String?
  color              String? // Hex color for UI
  isActive           Boolean  @default(true)
  businessCustomerId String // Which business owns this list
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  businessCustomer BusinessCustomer     @relation(fields: [businessCustomerId], references: [id])
  members          CustomerListMember[]

  @@map("customer_lists")
}

model CustomerListMember {
  id             String   @id @default(cuid())
  customerListId String
  customerId     String
  addedAt        DateTime @default(now())
  addedBy        String? // Admin who added them
  notes          String? // Why they were added to this list

  // Relations
  customerList CustomerList @relation(fields: [customerListId], references: [id], onDelete: Cascade)
  customer     Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Prevent duplicate entries
  @@unique([customerListId, customerId])
  @@map("customer_list_members")
}

model Menu {
  id         String   @id @default(cuid())
  date       DateTime @db.Date
  title      String?
  isActive   Boolean  @default(false)
  businessId String // Which business owns this menu
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  businessCustomer BusinessCustomer @relation(fields: [businessId], references: [id])
  menuItems        MenuItem[]
  orders           Order[]

  // Each business can only have one menu per date
  @@unique([businessId, date])
  @@map("menus")
}

model MenuItem {
  id          String  @id @default(cuid())
  menuId      String
  name        String
  description String?
  price       Int // Price in cents
  isAvailable Boolean @default(true)
  category    String? // e.g., "appetizer", "main", "dessert"
  imageUrl    String?

  // Relations
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@map("menu_items")
}

model Order {
  id           String      @id @default(cuid())
  customerId   String
  businessId   String? // Which business this order belongs to (nullable for backwards compatibility)
  menuId       String
  items        Json // Store ordered items as JSON
  totalAmount  Int // Total in cents
  platformFee  Int? // Platform fee collected (in cents)
  status       OrderStatus @default(PENDING)
  paymentId    String? // Stripe payment intent ID
  paymentUrl   String? // Payment link URL
  deliveryTime String?
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  customer         Customer          @relation(fields: [customerId], references: [id])
  businessCustomer BusinessCustomer? @relation(fields: [businessId], references: [id])
  menu             Menu              @relation(fields: [menuId], references: [id])

  @@map("orders")
}

model SmsLog {
  id         String       @id @default(cuid())
  customerId String?
  direction  SmsDirection
  message    String
  status     SmsStatus    @default(SENT)
  twilioSid  String? // Twilio message SID
  errorCode  String?
  createdAt  DateTime     @default(now())

  // Relations
  customer Customer? @relation(fields: [customerId], references: [id])

  @@map("sms_logs")
}

model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String // Hashed password
  name      String
  role      String   @default("admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_users")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PAID
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum SmsDirection {
  INBOUND
  OUTBOUND
}

enum SmsStatus {
  SENT
  DELIVERED
  FAILED
  RECEIVED
}
