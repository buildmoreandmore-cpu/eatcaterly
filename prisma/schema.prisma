// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String   @id @default(cuid())
  phoneNumber String   @unique
  name        String?
  email       String?
  isActive    Boolean  @default(true)
  preferences Json?    // Store customer preferences as JSON
  tags        String[] // Customer tags like "VIP", "Regular", "New"
  category    String?  // Customer category like "Frequent", "Occasional", "One-time"
  notes       String?  // Admin notes about customer
  lastOrderAt DateTime? // Track last order date
  totalOrders Int      @default(0) // Track total order count
  totalSpent  Int      @default(0) // Track total amount spent (in cents)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders          Order[]
  smsLogs         SmsLog[]
  customerListMembers CustomerListMember[]

  @@map("customers")
}

model BusinessCustomer {
  id                   String   @id @default(cuid())
  businessName         String
  contactName          String
  contactEmail         String   @unique
  zipCode              String
  assignedPhoneNumber  String   @unique
  areaCode             String
  city                 String?
  state                String?
  isActive             Boolean  @default(true)
  onboardingCompleted  Boolean  @default(false)
  subscriptionStatus   String   @default("trial") // trial, active, suspended, cancelled
  monthlyLimit         Int      @default(1000) // SMS limit per month
  currentUsage         Int      @default(0)     // Current month SMS count
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  customerLists        CustomerList[]

  @@map("business_customers")
}

model CustomerList {
  id          String   @id @default(cuid())
  name        String   // e.g., "VIP Customers", "Lunch Regulars", "Weekend Orders"
  description String?
  color       String?  // Hex color for UI
  isActive    Boolean  @default(true)
  businessCustomerId String // Which business owns this list
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  businessCustomer BusinessCustomer @relation(fields: [businessCustomerId], references: [id])
  members          CustomerListMember[]

  @@map("customer_lists")
}

model CustomerListMember {
  id             String   @id @default(cuid())
  customerListId String
  customerId     String
  addedAt        DateTime @default(now())
  addedBy        String?  // Admin who added them
  notes          String?  // Why they were added to this list

  // Relations
  customerList CustomerList @relation(fields: [customerListId], references: [id], onDelete: Cascade)
  customer     Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Prevent duplicate entries
  @@unique([customerListId, customerId])
  @@map("customer_list_members")
}

model Menu {
  id        String     @id @default(cuid())
  date      DateTime   @unique @db.Date
  title     String?
  isActive  Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  menuItems MenuItem[]
  orders    Order[]

  @@map("menus")
}

model MenuItem {
  id          String  @id @default(cuid())
  menuId      String
  name        String
  description String?
  price       Int     // Price in cents
  isAvailable Boolean @default(true)
  category    String? // e.g., "appetizer", "main", "dessert"
  imageUrl    String?

  // Relations
  menu Menu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@map("menu_items")
}

model Order {
  id           String      @id @default(cuid())
  customerId   String
  menuId       String
  items        Json        // Store ordered items as JSON
  totalAmount  Int         // Total in cents
  status       OrderStatus @default(PENDING)
  paymentId    String?     // Stripe payment intent ID
  paymentUrl   String?     // Payment link URL
  deliveryTime String?
  notes        String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id])
  menu     Menu     @relation(fields: [menuId], references: [id])

  @@map("orders")
}

model SmsLog {
  id         String     @id @default(cuid())
  customerId String?
  direction  SmsDirection
  message    String
  status     SmsStatus  @default(SENT)
  twilioSid  String?    // Twilio message SID
  errorCode  String?
  createdAt  DateTime   @default(now())

  // Relations
  customer Customer? @relation(fields: [customerId], references: [id])

  @@map("sms_logs")
}

model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Hashed password
  name      String
  role      String   @default("admin")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin_users")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PAID
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum SmsDirection {
  INBOUND
  OUTBOUND
}

enum SmsStatus {
  SENT
  DELIVERED
  FAILED
  RECEIVED
}